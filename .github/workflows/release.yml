name: Create Release

on:
  push:
    tags:
      - 'v*' # Run when tag matches v*, i.e. v1.0, v20.15.10, etc.

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # We need all the tags for versioning

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Set release version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Get Changelog Entry
      id: changelog_reader
      run: |
        TAG_NAME="${GITHUB_REF#refs/tags/}"
        echo "Getting changelog for $TAG_NAME"
        
        # Extract the release notes for the current version from CHANGELOG.md if it exists
        if [ -f CHANGELOG.md ]; then
          # Try to extract the current version's changelog
          RELEASE_NOTES=$(awk -v version="$TAG_NAME" 'BEGIN{RS="## ";FS="\n"}$1~version{$1="";print}' CHANGELOG.md)
          
          # If no specific entry found, generate from git log
          if [ -z "$RELEASE_NOTES" ]; then
            echo "No specific entry in CHANGELOG.md, generating from git log"
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            if [ -z "$PREVIOUS_TAG" ]; then
              # If this is the first tag, get all commits
              RELEASE_NOTES=$(git log --pretty=format:"* %s (%h)" --reverse)
            else
              # Get commits between the previous tag and this one
              RELEASE_NOTES=$(git log --pretty=format:"* %s (%h)" ${PREVIOUS_TAG}..HEAD --reverse)
            fi
          fi
        else
          echo "No CHANGELOG.md found, generating from git log"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            # If this is the first tag, get all commits
            RELEASE_NOTES=$(git log --pretty=format:"* %s (%h)" --reverse)
          else
            # Get commits between the previous tag and this one
            RELEASE_NOTES=$(git log --pretty=format:"* %s (%h)" ${PREVIOUS_TAG}..HEAD --reverse)
          fi
        fi
        
        # Save release notes to output in a way that preserves newlines
        EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
        echo "RELEASE_NOTES<<$EOF" >> $GITHUB_OUTPUT
        echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
        echo "$EOF" >> $GITHUB_OUTPUT
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and tag containers with version
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        platforms: linux/amd64
        tags: |
          ghcr.io/${{ github.repository_owner }}/stars-backend:${{ steps.get_version.outputs.VERSION }}
          ghcr.io/${{ github.repository_owner }}/stars-backend:latest
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        body: |
          # Release ${{ steps.get_version.outputs.VERSION }}
          
          ## Changes in this Release
          
          ${{ steps.changelog_reader.outputs.RELEASE_NOTES }}
          
          ## Installation
          
          ```bash
          # Pull and run the Docker image
          docker pull ghcr.io/${{ github.repository_owner }}/stars-backend:${{ steps.get_version.outputs.VERSION }}
          ```
          
          ## Deployment
          
          This version can be deployed using Azure Container Apps.
        draft: false
        prerelease: false
    
    - name: Notify about new release
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        RELEASE_URL="${{ steps.create_release.outputs.html_url }}"
        
        echo "Released version $VERSION: $RELEASE_URL"
        # Add webhook notifications if needed
        # Example for Slack:
        # curl -X POST -H "Content-Type: application/json" -d "{\"text\":\"New release $VERSION is out! $RELEASE_URL\"}" ${{ secrets.SLACK_WEBHOOK_URL }} 