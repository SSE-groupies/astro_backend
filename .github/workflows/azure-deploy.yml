name: Azure Container App Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ github.repository_owner }}/stars-backend
        tags: |
          type=ref,event=branch
          type=sha,format=short
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
        
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        platforms: linux/amd64
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Deploy to Azure Container App
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # Get the latest image tag we just pushed
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ' ' | awk '{print $1}')
          
          # Create resource group if it doesn't exist
          az group show --name ${{ secrets.AZURE_RESOURCE_GROUP }} || \
            az group create --name ${{ secrets.AZURE_RESOURCE_GROUP }} --location ${{ secrets.AZURE_LOCATION }}
          
          # Create container app environment if it doesn't exist
          az containerapp env show --name ${{ secrets.AZURE_CONTAINER_ENV }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} || \
            az containerapp env create --name ${{ secrets.AZURE_CONTAINER_ENV }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --location ${{ secrets.AZURE_LOCATION }}
          
          # Check if container app exists
          CONTAINER_APP_EXISTS=$(az containerapp show --name ${{ secrets.AZURE_CONTAINER_APP }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query name -o tsv 2>/dev/null || echo "")
          
          if [ -z "$CONTAINER_APP_EXISTS" ]; then
            # Create container app
            az containerapp create \
              --name ${{ secrets.AZURE_CONTAINER_APP }} \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --environment ${{ secrets.AZURE_CONTAINER_ENV }} \
              --image $IMAGE_TAG \
              --target-port 8080 \
              --ingress external \
              --min-replicas 1 \
              --max-replicas 3 \
              --enable-dapr false \
              --cpu 0.5 \
              --memory 1.0Gi \
              --env-vars \
                "ENVIRONMENT=production" \
                "PORT=8080" \
                "AZURE_STORAGE_CONNECTION_STRING=${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
                "REDIS_HOST=${{ secrets.REDIS_HOST }}" \
                "REDIS_PORT=${{ secrets.REDIS_PORT }}" \
                "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" \
                "REDIS_SSL=true" \
                "API_CORS_ORIGINS=${{ secrets.API_CORS_ORIGINS }}" \
                "ADMIN_API_KEY=${{ secrets.ADMIN_API_KEY }}"
          else
            # Update container app
            az containerapp update \
              --name ${{ secrets.AZURE_CONTAINER_APP }} \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --image $IMAGE_TAG \
              --set-env-vars \
                "ENVIRONMENT=production" \
                "PORT=8080" \
                "AZURE_STORAGE_CONNECTION_STRING=${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
                "REDIS_HOST=${{ secrets.REDIS_HOST }}" \
                "REDIS_PORT=${{ secrets.REDIS_PORT }}" \
                "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" \
                "REDIS_SSL=true" \
                "API_CORS_ORIGINS=${{ secrets.API_CORS_ORIGINS }}" \
                "ADMIN_API_KEY=${{ secrets.ADMIN_API_KEY }}"
          fi
          
          # Output the container app URL
          echo "Container App URL: $(az containerapp show --name ${{ secrets.AZURE_CONTAINER_APP }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn -o tsv)" 